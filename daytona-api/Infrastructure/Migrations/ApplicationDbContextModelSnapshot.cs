// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Models.Auction.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auction");
                });

            modelBuilder.Entity("Core.Entities.Models.Auction.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.ToTable("Lot");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.BodyStyle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BodyStyle");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Color", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Damage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Damage");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.DriveTrain", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DriveTrain");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fuel");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Highlights", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Highlights");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Odometer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actual")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.ToTable("Odometer");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transmission");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.VehicleMake", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleMake");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleModel");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HighlightsId")
                        .HasColumnType("int");

                    b.Property<bool>("Keys")
                        .HasColumnType("bit");

                    b.Property<int?>("PrimaryDamageId")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HighlightsId");

                    b.HasIndex("PrimaryDamageId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CylinderNumber")
                        .HasColumnType("tinyint");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<short>("Volume")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyStyleId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("DriveTrainId")
                        .HasColumnType("int");

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleMakeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("BodyStyleId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DriveTrainId");

                    b.HasIndex("EngineId");

                    b.HasIndex("LotId")
                        .IsUnique();

                    b.HasIndex("TransmissionId");

                    b.HasIndex("VehicleMakeId");

                    b.HasIndex("VehicleModelId");

                    b.HasIndex("Vin")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Auction.Lot", b =>
                {
                    b.HasOne("Core.Entities.Models.Auction.Auction", "Auction")
                        .WithMany("Lots")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Odometer", b =>
                {
                    b.HasOne("Core.Entities.Models.Vehicle.Vehicle", "Vehicle")
                        .WithOne("Odometer")
                        .HasForeignKey("Core.Entities.Models.Primitives.Vehicle.Odometer", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Condition", b =>
                {
                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.Highlights", "Highlights")
                        .WithMany()
                        .HasForeignKey("HighlightsId");

                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.Damage", "PrimaryDamage")
                        .WithMany("Conditions")
                        .HasForeignKey("PrimaryDamageId");

                    b.HasOne("Core.Entities.Models.Vehicle.Vehicle", "Vehicle")
                        .WithOne("Condition")
                        .HasForeignKey("Core.Entities.Models.Vehicle.Condition", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Highlights");

                    b.Navigation("PrimaryDamage");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Engine", b =>
                {
                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.Fuel", "Fuel")
                        .WithMany("Engines")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fuel");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Vehicle", b =>
                {
                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.BodyStyle", "BodyStyle")
                        .WithMany("Vehicles")
                        .HasForeignKey("BodyStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.Color", "Color")
                        .WithMany("Vehicles")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.DriveTrain", "DriveTrain")
                        .WithMany("Vehicles")
                        .HasForeignKey("DriveTrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Models.Vehicle.Engine", "Engine")
                        .WithMany("Vehicles")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Models.Auction.Lot", "Lot")
                        .WithOne("Vehicle")
                        .HasForeignKey("Core.Entities.Models.Vehicle.Vehicle", "LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.Transmission", "Transmission")
                        .WithMany("Vehicles")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.VehicleMake", "VehicleMake")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleMakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Models.Primitives.Vehicle.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyStyle");

                    b.Navigation("Color");

                    b.Navigation("DriveTrain");

                    b.Navigation("Engine");

                    b.Navigation("Lot");

                    b.Navigation("Transmission");

                    b.Navigation("VehicleMake");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Core.Entities.Models.Auction.Auction", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("Core.Entities.Models.Auction.Lot", b =>
                {
                    b.Navigation("Vehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.BodyStyle", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Color", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Damage", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.DriveTrain", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Fuel", b =>
                {
                    b.Navigation("Engines");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.Transmission", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.VehicleMake", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Primitives.Vehicle.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Engine", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Core.Entities.Models.Vehicle.Vehicle", b =>
                {
                    b.Navigation("Condition");

                    b.Navigation("Odometer");
                });
#pragma warning restore 612, 618
        }
    }
}
